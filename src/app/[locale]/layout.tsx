// import React from 'react';
// import type { Metadata } from 'next';
// import { Geist, Geist_Mono } from 'next/font/google';

// import '../globals.css';

// // import { locales } from '@/config';
// import { NextIntlClientProvider } from 'next-intl';
// import {
//   getMessages,
//   // getTranslations,
//   // unstable_setRequestLocale,
// } from 'next-intl/server';

// import { Providers } from '../providers';
// import { routing } from '@/i18n/routing';
// import { notFound } from 'next/navigation';

// const geistSans = Geist({
//   variable: '--font-geist-sans',
//   subsets: ['latin'],
// });

// const geistMono = Geist_Mono({
//   variable: '--font-geist-mono',
//   subsets: ['latin'],
// });

// // export function generateStaticParams() {
// //   return locales.map((locale) => ({ locale }));
// // }

// // export async function generateMetadata({
// //   params: { locale },
// // }: {
// //   params: { locale: string };
// // }) {
// //   const t = await getTranslations({ locale, namespace: 'localeLayout' });
// //   return {
// //     title: t('title'),
// //     description: t('description'),
// //   };
// // }

// // export const metadata: Metadata = {
// //   title: 'Create Next App',
// //   description: 'Generated by create next app',
// // };

// export default async function LocaleLayout({
//   children,
//   params: {locale}
// }: {
//   children: React.ReactNode;
//   params: {locale: string};
// }) {
//   // Ensure that the incoming `locale` is valid
//   if (!routing.locales.includes(locale as any)) {
//     notFound();
//   }

// export default async function RootLayout({
//   children,
//   params,
// }: Readonly<{
//   children: React.ReactNode;
//   params: { locale: string };
// }>) {
//   // unstable_setRequestLocale(params.locale);
//   const messages = await getMessages();
//   return (
//     <html lang={params.locale}>
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} min-w-screen min-h-screen antialiased`}
//       >
//         <NextIntlClientProvider messages={messages}>
//           <Providers>
//             <main className="container mx-auto px-3 lg:px-0">{children}</main>
//           </Providers>
//         </NextIntlClientProvider>
//       </body>
//     </html>
//   );
// }

import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  const locale = (await params).locale;
  // Ensure that the incoming `locale` is valid
  if (!routing.locales.includes(locale as any)) {
    notFound();
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body>
        <NextIntlClientProvider messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
